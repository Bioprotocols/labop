@prefix : <http://bioprotocols.org/paml#> .
@prefix om: <http://www.ontology-of-units-of-measure.org/resource/om-2/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix paml: <http://bioprotocols.org/paml#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sbol: <http://sbols.org/v3#> .
@prefix uml: <http://bioprotocols.org/uml#> .
@prefix MathM: <http://www.w3.org/1998/Math/MathML> .
@base <http://bioprotocols.org/paml#> .

<http://bioprotocols.org/paml> rdf:type owl:Ontology ;
                              owl:imports <http://bioprotocols.org/uml> ,
                                          <http://sbols.org/v3> , <http://www.ontology-of-units-of-measure.org/resource/om-2>,
                                          <http://www.w3.org/ns/prov> ;
                              rdfs:comment "Protocol Activity Modeling Languge (PAML) ontology." ;
                              owl:versionInfo "0.3" .

#################################################################
#    Annotation properties
#################################################################

###  http://www.w3.org/2002/07/owl#maxCardinality
owl:maxCardinality rdf:type owl:AnnotationProperty .
owl:minCardinality rdf:type owl:AnnotationProperty .


#################################################################
#    Datatypes
#################################################################

###  http://www.w3.org/2001/XMLSchema#anySimpleType
xsd:anySimpleType rdf:type rdfs:Datatype .


#################################################################
#    Protocol definitions, based on UML
#################################################################

paml:Protocol rdf:type owl:Class ;
              rdfs:comment '''A Protocol describes how to carry out some form of laboratory or research process.
              For example, a Protocol could describe DNA miniprep, Golden-Gate assembly, a cell culture experiment.
              At present this class adds no additional information over uml:Activity, but may in the future.''' ;
        rdfs:subClassOf uml:Activity .


paml:Primitive rdf:type owl:Class ;
              rdfs:comment '''A Primitive describes a library function that acts as a basic ``building block'' for a Protocol.
              For example, a Primitive could describe pipetting, measuring absorbance in a plate reader, or centrifuging.
              At present this class adds no additional information over uml:Behavior, but may in the future.''' ;
        rdfs:subClassOf uml:Behavior .


#################################################################
#    Execution record, bootstrapping from PROV-O
#################################################################

paml:BehaviorExecution rdf:type owl:Class ;
        rdfs:comment '''A BehaviorExecution is a record of how a Protocol, Primitive, or other uml:Behavior was carried out.
        The execution of the behavior could be either real or simulated.

        In specifying a BehaviorExecution, the prov:type field inherited from prov:Activity is used to indicate the
        uml:Behavior whose execution is being recorded. Precisely one value of prov:type MUST be a URI for a uml:Behavior.
        The prov:startedAtTime and prov:endedAtTime fields SHOULD be used to record timing information as this becomes
        available.
        Finally, the entity carrying out the execution SHOULD be recorded as a prov:Agent indicated using a
        prov:Association.

        Note that a BehaviorExecution can be used to record both the state of an in-progress execution as well as an
        execution that has completed. As a BehaviorExecution proceeds, all values of its properties are monotonic,
        i.e., they are only added to and never changed.

        TODO: need to changing completedNormally to allow indication of an in-progress BehaviorExecution
        TODO: Is there a good ontology for agent roles in association?''' ;
        rdfs:subClassOf prov:Activity , # note: prov:Activity here refers to the adapted version in SBOL
    [ rdf:type owl:Restriction ; owl:allValuesFrom paml:ParameterValue ; owl:onProperty paml:parameterValuePair ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom xsd:boolean ; owl:onProperty paml:completedNormally ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom paml:Material ; owl:onProperty paml:consumedMaterial ] .

paml:parameterValuePair rdf:type owl:ObjectProperty ;
        rdfs:comment '''The parameterValuePair property is used to record the value that was associated with each
        uml:Parameter for the uml:Behavior when it was executed, by means of a ParameterValue object.
        Any uml:Parameter that is not listed is assumed to have had no value assigned. Conversely, every non-optional
        uml:Parameter for the uml:Behavior MUST have an associated parameter value.
        Finally, note that this applies both to input uml:Parameter objects, whose value is set before execution begins,
        and to output uml:Parameter objects, whose value is set by the time execution ends.

        TODO: are multiple values allowed, or do those need to be passed as list/set types?
        ''' ;
              rdfs:subPropertyOf sbol:directlyComprises ;
              rdfs:domain paml:BehaviorExecution ;
              rdfs:range paml:ParameterValue ;
              rdfs:label "parameter_values" .

paml:completedNormally rdf:type owl:DatatypeProperty ;
        rdfs:comment '''This boolean should be set to true if the Behavior completed normally and false if there
        was some exception condition. At present, no further information is being encoded about exceptions, but this
        is an extension that is anticipated for the future.''' ;
              rdfs:domain paml:BehaviorExecution ;
              rdfs:range xsd:boolean ;
              rdfs:label "completed_normally" .

paml:consumedMaterial rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property is used to record the noteworthy consumables used during the execution of the
        Behavior. For example, a cell culture protocols will consume various reagents and samples of cells. Materials
        with the same specification SHOULD be consolidated, such that the list of materials SHOULD NOT contain two
        materials with the same specification.

        For example, consuming 5.0 mL of PBS and 2.0 mL of PBS should be recorded as consuming 7.0 mL of PBS.
        Complex materials, however, MAY contain the same material more than once in their substructure.
        For example, M9 media contains glucose, but it would not be necessary to consolidate the glucose in M9 media
        with additional glucose that was added as a supplement, since that would change the definition of the media.''' ;
              rdfs:subPropertyOf sbol:directlyComprises ;
              rdfs:domain paml:BehaviorExecution ;
              rdfs:range paml:Material ;
              rdfs:label "consumed_material" .

paml:ParameterValue rdf:type owl:Class ;
        rdfs:comment '''This class is used to represent the assignment of a value to a parameter in a BehaviorExecution
        that records the execution of a uml:Behavior. This class is similar to prov:Usage, but instead of always
        pointing to an object it uses an arbitrary literal (which might or might not be an object). An example would
        be recording that a plate reader absorbance measurement was taken with its absorbance wavelength parameter set
        to 600 nm''' ;
        rdfs:subClassOf sbol:Identified,
    [ rdf:type owl:Restriction ; owl:allValuesFrom uml:OrderedPropertyValue ; owl:onProperty paml:parameter ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom uml:LiteralSpecification ; owl:onProperty paml:parameterValue ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ] .

paml:parameter rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property points to the uml:Parameter associated with the value (e.g., wavelength for a
        plate reader absorbance measurement behavior).''' ;
              rdfs:domain paml:ParameterValue ;
              rdfs:range uml:OrderedPropertyValue ;
              rdfs:label "parameter" .

paml:parameterValue rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property points to the literal value used for the parameter during execution (e.g., a
        uml:LiteralIdentified for an om:Measure representing a 600 nm wavelength).''' ;
              rdfs:subPropertyOf sbol:directlyComprises ;
              rdfs:domain paml:ParameterValue ;
              rdfs:range uml:LiteralSpecification ;
              rdfs:label "value" .


paml:Material rdf:type owl:Class ;
        rdfs:comment '''An amount of material allocated for use during the execution of a behavior.
        For example a Material might be used to specify 1 96-well flat-bottom microplate or 2.5 mL of 10 millimolar glucose.

        TODO: consider changing type of specification to allow non-TopLevel descriptions, such as a ContainerSpec or sbol:ExternallyDefined
        TODO: consider adding a field to distinguish between expended vs. reusable materials.''' ;
        rdfs:subClassOf sbol:Identified,
    [ rdf:type owl:Restriction ; owl:allValuesFrom sbol:TopLevel ; owl:onProperty paml:specification ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom om:Measure ; owl:onProperty paml:amount ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ] .

paml:specification rdf:type owl:ObjectProperty ;
        rdfs:comment '''The specification property is used to indicate the type of material used.
        For example a DNA sample would be described by an sbol:Component.

        TODO: add example for glucose and for 96-well plate''' ;
              rdfs:domain paml:Material ;
              rdfs:range sbol:TopLevel ;
              rdfs:label "specification" .

paml:amount rdf:type owl:ObjectProperty ;
        rdfs:comment '''The amount property of a Material is used to indicate the quantity of material used.
        For example, 2.5 mL (referring to a fluid) or 3 (with unit "number", referring to a group of microplates)''' ;
              rdfs:subPropertyOf sbol:directlyComprises ;
              rdfs:domain paml:Material ;
              rdfs:range om:Measure ;
              rdfs:label "amount" .

paml:ProtocolExecution rdf:type owl:Class ;
        rdfs:comment '''A ProtocolExecution expands on the information in a BehaviorExecution by including records for
        the nodes and edges defining the Protocol's behavior as a uml:Activity. Specifically, the execution property
        is used to record each firing of a uml:ActivityNode and the flow property is used to record each time a token
        moves along a uml:ActivityEdge.
        Otherwise, a ProtocolExecution is used exactly the same way as its parent class BehaviorExecution.

        TODO: consider dropping the protocol field as redundant with use prov:type field in its parent''' ;
        rdfs:subClassOf paml:BehaviorExecution ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom paml:Protocol ; owl:onProperty paml:protocol ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom paml:ActivityNodeExecution ; owl:onProperty paml:execution ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom paml:ActivityEdgeFlow ; owl:onProperty paml:flow ] .

paml:protocol rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property appears to be redundant with the use of prov:type specified by BehaviorExecution, and is likely to be deleted''' ;
              rdfs:domain paml:ProtocolExecution ;
              rdfs:range paml:Protocol ;
              rdfs:label "protocol" .

paml:execution rdf:type owl:ObjectProperty ;
        rdfs:comment '''Each instance of this property links to an ActivityNodeExecution that records one
        firing of a uml:ActivityNode during the execution of its containing Protocol''' ;
              rdfs:subPropertyOf sbol:directlyComprises ;
              rdfs:domain paml:ProtocolExecution ;
              rdfs:range paml:ActivityNodeExecution ;
              rdfs:label "executions" .

paml:flow rdf:type owl:ObjectProperty ;
        rdfs:comment '''Each instance of this property links to an ActivityEdgeFlow that records one movement of a UML
        token along a uml:ActivityEdge during the execution of its containing Protocol''' ;
              rdfs:subPropertyOf sbol:directlyComprises ;
              rdfs:domain paml:ProtocolExecution ;
              rdfs:range paml:ActivityEdgeFlow ;
              rdfs:label "flows" .


paml:ActivityEdgeFlow rdf:type owl:Class ;
        rdfs:comment '''An ActivityEdgeFlow records one movement of a UML token along a uml:ActivityEdge during the
        execution of its containing Protocol. If the edge is a uml:ObjectFlow, then the value MUST be set.
        If the edge is a uml:ControlFlow, then the value MUST NOT be set.

        For instance, the ActivityEdgeFlow for a uml:ObjectFlow might record a measurement being sent to an output
        uml:Parameter, while the ActivityEdgeFlow for a uml:ControlFlow might record a decision to proceed down a
        particular branch from a uml:DecisionNode.

        Note that a uml:ActivityEdge might appear in multiple ActivityEdgeFlow records associated with a single
        ProtocolExecution, e.g., due to a loop in the Protocol.  It also might not appear in any, if the
        uml:ActivityEdge is on a path not taken due to branching control flow.

        TODO: correct the cardinality: edgeValue is supposed to be optional, not edge
        ''' ;
        rdfs:subClassOf sbol:Identified ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom uml:ActivityEdge ; owl:onProperty paml:edge ;
      owl:minCardinality "0"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom sbol:Identified ; owl:onProperty paml:edgeValue ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom paml:ActivityNodeExecution ; owl:onProperty paml:tokenSource ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] .

paml:edge rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property is used to indicate the uml:ActivityEdge down which the token moved.''' ;
              rdfs:domain paml:ActivityEdgeFlow ;
              rdfs:range uml:ActivityEdge ;
              rdfs:label "edge" .

paml:edgeValue rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property is used to indicate the value of a token that moved on a uml:ObjectFlow edge.''' ;
              rdfs:subPropertyOf sbol:directlyComprises ;
              rdfs:domain paml:ActivityEdgeFlow ;
              rdfs:range uml:LiteralSpecification ;
              rdfs:label "value" .

paml:tokenSource rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property is used to indicate the ActivityNodeExecution that produced the token.''' ;
              rdfs:domain paml:ActivityEdgeFlow ;
              rdfs:range paml:ActivityNodeExecution ;
              rdfs:label "token_source" .


paml:ActivityNodeExecution rdf:type owl:Class ;
        rdfs:comment '''An ActivityNodeExecution records one instance in which a uml:ActivityNode is executed during the
        execution of its containing Protocol.

        For instance, the ActivityNodeExecution for a uml:CallBehaviorAction to measure absorbance on a plate reader
        would set its node property to point to the uml:CallBehaviorAction and might have incomingFlow properties
        indicating arrival of information about the samples to measure via a uml:ObjectFlow and the arrival a
        of permission to begin via a uml:ControlFlow.

        Note that a uml:ActivityNode might appear in multiple ActivityNodeExecution records associated with a single
        ProtocolExecution, e.g., due to a loop in the Protocol.  It also might not appear in any, if the
        uml:ActivityNode is on a path not taken due to branching control flow.''' ;
        rdfs:subClassOf sbol:Identified ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom uml:ActivityNode ; owl:onProperty paml:node ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom paml:ActivityEdgeFlow ; owl:onProperty paml:incomingFlow ] .

paml:node rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property is used to indicate the uml:ActivityNode that has been execcuted.''' ;
              rdfs:domain paml:ActivityNodeExecution ;
              rdfs:range uml:ActivityNode ;
              rdfs:label "node" .

paml:incomingFlow rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property is used to indicate an ActivityEdgeFlow that delivered a token consumed during
        the execution of the uml:ActivityNode.''' ;
              rdfs:domain paml:ActivityNodeExecution ;
              rdfs:range paml:ActivityEdgeFlow ;
              rdfs:label "incoming_flows" .


paml:CallBehaviorExecution rdf:type owl:Class ;
        rdfs:comment '''A CallBehaviorExecution extends ActivityNodeExecution by adding a pointer to a BehaviorExecution
        record for the uml:Behavior that is being executed.

        For a primitive action (e.g., measuring absorbance on a plate reader), this is a plain BehaviorExecution,
        while for calling a Protocol as a sub-routine (e.g., to run a stage of an Type IIS assembly), this would be a
        ProtocolExecution.''' ;
        rdfs:subClassOf paml:ActivityNodeExecution ,
    [ rdf:type owl:Restriction ; owl:allValuesFrom paml:BehaviorExecution ; owl:onProperty paml:call ;
      owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ; ] .

paml:call rdf:type owl:ObjectProperty ;
        rdfs:comment '''This property indicates the BehaviorExecution record for the uml:Behavior that was called.''' ;
              rdfs:domain paml:CallBehaviorExecution ;
              rdfs:range paml:BehaviorExecution ;
              rdfs:label "call" .



#################################################################
#    Sample collection data model
#################################################################

paml:SampleCollection rdf:type owl:Class ;
        rdfs:comment '''SampleCollection is the base class for describing the collections of physical materials that are
         acted upon by a Protocol. For example, a SampleCollection might describe a set of 10 cell cultures growing in
         96-well plate cells, or a set of 6 streaked agar plates, or a single 500 mL flask filled with media.

         There are two types of SampleCollection. A SampleArray specifies an n-dimensional rectangular array of samples,
         all stored in the same type of container. A SampleMask specifies a subset of a SampleCollection by means of an
         array of Boolean values indicating whether each element is included or excluded from the subset.

         Note, however, that a SampleCollection is a logical object and not a physical object. Thus, while a
         SampleCollection might describe a set of samples in 96-well plate wells, it does not necessarily identify
         a particular 96-well plate or the location of those wells.  In practice, these will be determined as a
         result of the specific library calls made to generate SampleCollection objects, and may not be determined
         until the protocol is actually run in a particular execution environment.

         This is important for increasing the flexibility with which a Protocol can be specified and applied.
         Consider, for example, a cell culturing protocol that includes a step to measure sample absorbance on a plate
         reader. Describing this step does not require knowing how the samples are laid out on the plate, and in many
         cases is even acceptable to run on samples across multiple plates. This flexibility will allow the cell
         culturing protocol to be applied for experiments with different numbers and arrangements of samples.''' ;
        rdfs:subClassOf sbol:Identified .


paml:SampleArray rdf:type owl:Class ;
        rdfs:comment '''A SampleArray specifies an n-dimensional rectangular array of samples, all stored in the same
        type of container. For example, a SampleCollection might describe a set of 10 cell cultures growing in
        96-well plate cells, or a set of 6 streaked agar plates, or a single 500 mL flask filled with media.

        Wells may be full, in which case the contents property should contain a URI to a description of the sample,
        or empty, in which case the contents should be null.

        Note that this is a logical array, and does not necessarily indicate the actual layout of the samples in space.
        For example, a 2x4 array of samples in 96-well plate wells might end up being laid out as a 2x4 array in wells
        A1 to B4 or as a 2x4 array in wells G5 to H8 or as an 8x1 column in wells A1 to H1, or even as eight wells
        scattered arbitrarily around the plate according to an anti-bias quality control schema.

        This also allows for higher-dimensional arrays where each dimension represents an experimental factor.
        For example, an experiment testing four factors with 3, 3, 4, and 5 values per factor, for a total of 180
        combinations, could be represented as a 4-dimensional sample array of 96-well plate wells, and then end up
        laid out over two plates.

        TODO: need to decide on the format of the contents description.''' ;
        rdfs:subClassOf paml:SampleCollection ,
            [ rdf:type owl:Restriction ;
              owl:onProperty paml:containerType ;
              owl:allValuesFrom xsd:anyURI ; # replace with container ontology, when available
              owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ;
              rdfs:comment "Type of container used for storing the samples. The size and dimension may not match that of the array: it is up to execution to lay out the array in one or more containers"
            ] ,
            [ rdf:type owl:Restriction ;
              owl:onProperty paml:contents ;
              owl:allValuesFrom xsd:string ; # need to replace this with an serializable array model
              owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger ;
              rdfs:comment "N-dimensional array of URI for specification or nulls"
            ] .

paml:containerType rdf:type owl:DatatypeProperty ;
        rdfs:comment '''''' ;
              rdfs:domain paml:SampleArray ;
              rdfs:range xsd:anyURI ;
              rdfs:label "container_type" .

paml:contents rdf:type owl:DatatypeProperty ;
        rdfs:comment '''Description of the contents.
        TODO: need to decide whether this is a multi-valued property with associated array coordinates or a
        single-valued property with an array value.
        Currently set to string as a "dummy" value that can serialize anything.''' ;
              rdfs:domain paml:SampleArray ;
              rdfs:range xsd:string ;
              rdfs:label "contents" .

paml:SampleMask rdf:type owl:Class ;
        rdfs:comment '''A SampleMask is a subset of a SampleCollection. The subset of samples to be included is defined
        by an array of Boolean values, where true values indicate that a sample is included and false values indicate
        that it is excluded.

        The dimensions of the mask MUST be identical to the dimensions of the source SampleCollection. For this purpose,
        the dimensions of a masked subset are not reduced, but remain the same as the original SampleArray. This allows
        masks to be composed, such that SampleMask(source=SampleMask(source=X,mask=mask1),mask=mask2) is equivalent to
        SampleMask(source=X,mask=mask1 AND mask2). Note that this implies masks are commutative and idempotent.''' ;
        rdfs:subClassOf paml:SampleCollection ,
            [ rdf:type owl:Restriction ;
              owl:onProperty paml:source ;
              owl:allValuesFrom paml:SampleCollection ;
              owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger
            ] ,
            [ rdf:type owl:Restriction ;
              owl:onProperty paml:mask ;
              owl:allValuesFrom xsd:string ; # need to replace this with an serializable array model
              owl:minCardinality "1"^^xsd:nonNegativeInteger ; owl:maxCardinality "1"^^xsd:nonNegativeInteger
            ] .

paml:source rdf:type owl:ObjectProperty ;
        rdfs:comment '''The source indicates the SampleCollection that is being subsetted via the mask''' ;
              rdfs:domain paml:SampleMask ;
              rdfs:range paml:SampleCollection ;
              rdfs:label "source" .

paml:mask rdf:type owl:DatatypeProperty ;
        rdfs:comment '''The mask is an N-dimensional array of Booleans values, where each Boolean indicates whether the
        sample at the corresponding location in the source is included in the subset.

        TODO: format of mask array needs to match the array format chosen for the SampleArray contents property''' ;
              rdfs:domain paml:mask ;
              rdfs:range xsd:string ;
              rdfs:label "mask" .




paml:SampleData rdf:type owl:Class ;
        rdfs:comment '''The SampleData class is used to associate a set of data with a collection of samples.
        This is typically used to capture measurements, e.g., an array of absorbance measurements collected by
        a plate reader. Using this data structure allows the values in a dataframe to be automatically linked to
        the descriptions of the samples that the data describes, which is critical for data analysis.

        The dimensions of the sampleDataValues MUST equal the dimensions of the SampleCollection linked with fromSamples.

        TODO: the format of the data values needs to be compatible with the array format chosen for the
        SampleArray contents property. In this case, however, we also need to consider how we want to support
        multiple values for each sample (e.g., measurement of both fluorescence and absorbance in a plate reader),
        as well as links to more complex data (e.g., results of flow cytometry or omics for each sample)''' ;
            rdfs:subClassOf sbol:Identified ,
                            [ rdf:type owl:Restriction ;
                              owl:onProperty paml:sampleDataValues ;
                              owl:allValuesFrom xsd:string ; # need to replace this with an serializable array model
                              owl:minCardinality "1"^^xsd:nonNegativeInteger ;
                              owl:maxCardinality "1"^^xsd:nonNegativeInteger ;
                              ] ,
                            [ rdf:type owl:Restriction ;
                              owl:onProperty paml:fromSamples ;
                              owl:allValuesFrom paml:SampleCollection ;
                              owl:minCardinality "1"^^xsd:nonNegativeInteger ;
                              owl:maxCardinality "1"^^xsd:nonNegativeInteger ;
                              ] .

paml:sampleDataValues rdf:type owl:ObjectProperty ;
        rdfs:comment '''The sampleDataValues are an array of data values, one for each sample, format to be determined.''';
              rdfs:domain paml:SampleData ;
              rdfs:range xsd:string ; # TODO: consider https://github.com/SynBioDex/sbol_factory/issues/7
              rdfs:label "values" .

paml:fromSamples rdf:type owl:ObjectProperty ;
        rdfs:comment '''The fromSamples property indicates the SampleCollection from which the data were collected.''' ;
              rdfs:subPropertyOf sbol:directlyComprises ;
              rdfs:domain paml:SampleData ;
              rdfs:range paml:SampleCollection ;
              rdfs:label "from_samples" .


#################################################################
#    Container specification
#################################################################
paml:queryString a owl:DatatypeProperty ,
                   owl:FunctionalProperty ;
    rdfs:domain paml:ContainerSpec ;
    rdfs:range xsd:string ;
    rdfs:label "queryString" ;
    rdfs:comment "A query string, in OWL Manchester syntax, to be used to find matching containers in the ContainerSpec." .


paml:prefixMap a owl:DatatypeProperty ,
                 owl:FunctionalProperty ;
    rdfs:domain paml:ContainerSpec ;
    rdfs:range xsd:string ;
    rdfs:label "prefixMap" ;
    rdfs:comment "A prefix map in JSON-LD format, to be applied to a queryString." .
    

paml:ContainerSpec a owl:Class ;
        rdfs:comment '''A ContainerSpec is used to indicate the type of container to be used for a SampleArray, e.g.,
        a standard 96-well flat-bottom transparent plate.

        TODO: determine if we want to use this format or modify it in some way.''' ;
    rdfs:subClassOf sbol:Identified ,
    [ rdf:type owl:Restriction ;
         owl:onProperty paml:queryString ;
         owl:maxCardinality "1"^^xsd:nonNegativeInteger ] ,
   [ rdf:type owl:Restriction ;
         owl:onProperty paml:queryString ;
         owl:minCardinality "1"^^xsd:nonNegativeInteger ] ,
    [ rdf:type owl:Restriction ;
          owl:onProperty paml:prefixMap ;
          owl:maxCardinality "1"^^xsd:nonNegativeInteger ] ,
    [ rdf:type owl:Restriction ;
          owl:onProperty paml:prefixMap ;
          owl:minCardinality "1"^^xsd:nonNegativeInteger ] .
